package main

import (
	"bytes"
	"io"
	"log"
	"os"
	"strings"
	"testing"
)

func TestMainFunction(t *testing.T) {
	// Save the original stdout, stderr, and arguments
	origStdout := os.Stdout
	origArgs := os.Args
	defer func() {
		os.Stdout = origStdout
		os.Args = origArgs
	}()

	// Suppress log output during testing
	log.SetOutput(io.Discard)

	// Define test cases
	tests := []struct {
		name       string
		args       []string
		wantOutput string
	}{
		{
			name: "hello",
			args: []string{"cmd", "hello"},
			wantOutput: ` _              _   _          
| |            | | | |         
| |__     ___  | | | |   ___   
|  _ \   / _ \ | | | |  / _ \  
| | | | |  __/ | | | | | (_) | 
|_| |_|  \___| |_| |_|  \___/  
                               
                               
`,
		},
		{
			name: "HELLO",
			args: []string{"cmd", "HELLO"},
			wantOutput: ` _    _   ______   _        _         ____   
| |  | | |  ____| | |      | |       / __ \  
| |__| | | |__    | |      | |      | |  | | 
|  __  | |  __|   | |      | |      | |  | | 
| |  | | | |____  | |____  | |____  | |__| | 
|_|  |_| |______| |______| |______|  \____/  
                                             
                                             
`,
		},
		{
			name: "HeLlo HuMaN",
			args: []string{"cmd", "HeLlo HuMaN"},
			wantOutput: ` _    _          _        _                 _    _           __  __           _   _  
| |  | |        | |      | |               | |  | |         |  \/  |         | \ | | 
| |__| |   ___  | |      | |   ___         | |__| |  _   _  | \  / |   __ _  |  \| | 
|  __  |  / _ \ | |      | |  / _ \        |  __  | | | | | | |\/| |  / _` + "`" + ` | | . ` + "`" + ` | 
| |  | | |  __/ | |____  | | | (_) |       | |  | | | |_| | | |  | | | (_| | | |\  | 
|_|  |_|  \___| |______| |_|  \___/        |_|  |_|  \__,_| |_|  |_|  \__,_| |_| \_| 
                                                                                     
                                                                                     
`,
		},
		{
			name: "1Hello 2There",
			args: []string{"cmd", "1Hello 2There"},
			wantOutput: `     _    _          _   _                         _______   _                           
 _  | |  | |        | | | |                ____   |__   __| | |                          
/ | | |__| |   ___  | | | |   ___         |___ \     | |    | |__     ___   _ __    ___  
| | |  __  |  / _ \ | | | |  / _ \          __) |    | |    |  _ \   / _ \ | '__|  / _ \ 
| | | |  | | |  __/ | | | | | (_) |        / __/     | |    | | | | |  __/ | |    |  __/ 
|_| |_|  |_|  \___| |_| |_|  \___/        |_____|    |_|    |_| |_|  \___| |_|     \___| 
                                                                                         
                                                                                         
`,
		},
		{
			name: "Hello\\nThere",
			args: []string{"cmd", "Hello\\nThere"},
			wantOutput: ` _    _          _   _          
| |  | |        | | | |         
| |__| |   ___  | | | |   ___   
|  __  |  / _ \ | | | |  / _ \  
| |  | | |  __/ | | | | | (_) | 
|_|  |_|  \___| |_| |_|  \___/  
                                
                                
 _______   _                           
|__   __| | |                          
   | |    | |__     ___   _ __    ___  
   | |    |  _ \   / _ \ | '__|  / _ \ 
   | |    | | | | |  __/ | |    |  __/ 
   |_|    |_| |_|  \___| |_|     \___| 
                                       
                                       
`,
		},
		{
			name: "Hello\\n\\nThere",
			args: []string{"cmd", "Hello\\n\\nThere"},
			wantOutput: ` _    _          _   _          
| |  | |        | | | |         
| |__| |   ___  | | | |   ___   
|  __  |  / _ \ | | | |  / _ \  
| |  | | |  __/ | | | | | (_) | 
|_|  |_|  \___| |_| |_|  \___/  
                                
                                

 _______   _                           
|__   __| | |                          
   | |    | |__     ___   _ __    ___  
   | |    |  _ \   / _ \ | '__|  / _ \ 
   | |    | | | | |  __/ | |    |  __/ 
   |_|    |_| |_|  \___| |_|     \___| 
                                       
                                       
`,
		},
		{
			name: "{Hello & There #}",
			args: []string{"cmd", "{Hello & There #}"},
			wantOutput: `   __  _    _          _   _                                _______   _                                    _  _    __    
  / / | |  | |        | | | |                 ___          |__   __| | |                                 _| || |_  \ \   
 | |  | |__| |   ___  | | | |   ___          ( _ )            | |    | |__     ___   _ __    ___        |_  __  _|  | |  
/ /   |  __  |  / _ \ | | | |  / _ \         / _ \/\          | |    |  _ \   / _ \ | '__|  / _ \        _| || |_    \ \ 
\ \   | |  | | |  __/ | | | | | (_) |       | (_>  <          | |    | | | | |  __/ | |    |  __/       |_  __  _|   / / 
 | |  |_|  |_|  \___| |_| |_|  \___/         \___/\/          |_|    |_| |_|  \___| |_|     \___|         |_||_|    | |  
  \_\                                                                                                              /_/   
                                                                                                                         
`,
		},
		{
			name: "hello There 1 to 2!",
			args: []string{"cmd", "hello There 1 to 2!"},
			wantOutput: ` _              _   _                 _______   _                                            _                           _  
| |            | | | |               |__   __| | |                                 _        | |                  ____   | | 
| |__     ___  | | | |   ___            | |    | |__     ___   _ __    ___        / |       | |_    ___         |___ \  | | 
|  _ \   / _ \ | | | |  / _ \           | |    |  _ \   / _ \ | '__|  / _ \       | |       | __|  / _ \          __) | | | 
| | | | |  __/ | | | | | (_) |          | |    | | | | |  __/ | |    |  __/       | |       \ |_  | (_) |        / __/  |_| 
|_| |_|  \___| |_| |_|  \___/           |_|    |_| |_|  \___| |_|     \___|       |_|        \__|  \___/        |_____| (_) 
                                                                                                                            
                                                                                                                            
`,
		},
		{
			name: "MaD3IrA&LiSboN",
			args: []string{"cmd", "MaD3IrA&LiSboN"},
			wantOutput: ` __  __           _____            _____                              _        _    _____   _               _   _  
|  \/  |         |  __ \   _____  |_   _|            /\       ___    | |      (_)  / ____| | |             | \ | | 
| \  / |   __ _  | |  | | |___ /    | |    _ __     /  \     ( _ )   | |       _  | (___   | |__     ___   |  \| | 
| |\/| |  / _` + "`" + ` | | |  | |   |_ \    | |   | '__|   / /\ \    / _ \/\ | |      | |  \___ \  | '_ \   / _ \  | . ` + "`" + ` | 
| |  | | | (_| | | |__| |  ___) |  _| |_  | |     / ____ \  | (_>  < | |____  | |  ____) | | |_) | | (_) | | |\  | 
|_|  |_|  \__,_| |_____/  |____/  |_____| |_|    /_/    \_\  \___/\/ |______| |_| |_____/  |_.__/   \___/  |_| \_| 
                                                                                                                   
                                                                                                                   
`,
		},
		{
			name: `1a\"#FdwHywR&/()=`,
			args: []string{"cmd", "1a\"#FdwHywR&/()="},
			wantOutput: `             _ _     _  _     ______       _              _    _                      _____                 __   __ __            
 _          ( | )  _| || |_  |  ____|     | |            | |  | |                    |  __ \    ___        / /  / / \ \   ______  
/ |   __ _   V V  |_  __  _| | |__      __| | __      __ | |__| |  _   _  __      __ | |__) |  ( _ )      / /  | |   | | |______| 
| |  / _` + "`" + ` |        _| || |_  |  __|    / _` + "`" + ` | \ \ /\ / / |  __  | | | | | \ \ /\ / / |  _  /   / _ \/\   / /   | |   | |  ______  
| | | (_| |       |_  __  _| | |      | (_| |  \ V  V /  | |  | | | |_| |  \ V  V /  | | \ \  | (_>  <  / /    | |   | | |______| 
|_|  \__,_|         |_||_|   |_|       \__,_|   \_/\_/   |_|  |_|  \__, |   \_/\_/   |_|  \_\  \___/\/ /_/     | |   | |          
                                                                   __/ /                                        \_\ /_/           
                                                                  |___/                                                           
`,
		},
		{
			name: "{|}~",
			args: []string{"cmd", "{|}~"},
			wantOutput: `   __  _  __     /\/| 
  / / | | \ \   |/\/  
 | |  | |  | |        
/ /   | |   \ \       
\ \   | |   / /       
 | |  | |  | |        
  \_\ | | /_/         
      |_|             
`,
		},
		{
			name: "[\\]^_ 'a",
			args: []string{"cmd", "[\\]^_ 'a"},
			wantOutput: ` ___  __       ___   /\                  _          
|  _| \ \     |_  | |/\|                ( )         
| |    \ \      | |                     |/    __ _  
| |     \ \     | |                          / _` + "`" + ` | 
| |      \ \    | |                         | (_| | 
| |_      \_\  _| |                          \__,_| 
|___|         |___|       ______                    
                         |______|                   
`,
		},
		{
			name: "RGB",
			args: []string{"cmd", "RGB"},
			wantOutput: ` _____     _____   ____   
|  __ \   / ____| |  _ \  
| |__) | | |  __  | |_) | 
|  _  /  | | |_ | |  _ <  
| | \ \  | |__| | | |_) | 
|_|  \_\  \_____| |____/  
                          
                          
`,
		},
		{
			name: ":;<=>?@",
			args: []string{"cmd", ":;<=>?@"},
			wantOutput: `           __          __     ___             
 _   _    / /  ______  \ \   |__ \     ____   
(_) (_)  / /  |______|  \ \     ) |   / __ \  
        < <    ______    > >   / /   / / _` + "`" + ` | 
 _   _   \ \  |______|  / /   |_|   | | (_| | 
(_) ( )   \_\          /_/    (_)    \ \__,_| 
    |/                                \____/  
                                              
`,
		},
		{
			name: `\!" #$%&'()*+,-./`,
			args: []string{"cmd", `\!" #$%&'()*+,-./`},
			wantOutput: `__       _   _ _           _  _      _    _   __           _    __ __       _                                   __ 
\ \     | | ( | )        _| || |_   | |  (_) / /   ___    ( )  / / \ \   /\| |/\     _                         / / 
 \ \    | |  V V        |_  __  _| / __)    / /   ( _ )   |/  | |   | |  \ ` + "`" + ` ' /   _| |_       ______         / /  
  \ \   | |              _| || |_  \__ \   / /    / _ \/\     | |   | | |_     _| |_   _|     |______|       / /   
   \ \  |_|             |_  __  _| (   /  / / _  | (_>  <     | |   | |  / , . \    |_|    _            _   / /    
    \_\ (_)               |_||_|    |_|  /_/ (_)  \___/\/     | |   | |  \/|_|\/          ( )          (_) /_/     
                                                               \_\ /_/                    |/                       
                                                                                                                   
`,
		},
		{
			name: "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
			args: []string{"cmd", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"},
			wantOutput: `            ____     _____   _____    ______   ______    _____   _    _   _____        _   _  __  _        __  __   _   _    ____    _____     ____    _____     _____   _______   _    _  __      __ __          __ __   __ __     __  ______ 
    /\     |  _ \   / ____| |  __ \  |  ____| |  ____|  / ____| | |  | | |_   _|      | | | |/ / | |      |  \/  | | \ | |  / __ \  |  __ \   / __ \  |  __ \   / ____| |__   __| | |  | | \ \    / / \ \        / / \ \ / / \ \   / / |___  / 
   /  \    | |_) | | |      | |  | | | |__    | |__    | |  __  | |__| |   | |        | | | ' /  | |      | \  / | |  \| | | |  | | | |__) | | |  | | | |__) | | (___      | |    | |  | |  \ \  / /   \ \  /\  / /   \ V /   \ \_/ /     / /  
  / /\ \   |  _ <  | |      | |  | | |  __|   |  __|   | | |_ | |  __  |   | |    _   | | |  <   | |      | |\/| | | . ` + "`" + ` | | |  | | |  ___/  | |  | | |  _  /   \___ \     | |    | |  | |   \ \/ /     \ \/  \/ /     > <     \   /     / /   
 / ____ \  | |_) | | |____  | |__| | | |____  | |      | |__| | | |  | |  _| |_  | |__| | | . \  | |____  | |  | | | |\  | | |__| | | |      | |__| | | | \ \   ____) |    | |    | |__| |    \  /       \  /\  /     / . \     | |     / /__  
/_/    \_\ |____/   \_____| |_____/  |______| |_|       \_____| |_|  |_| |_____|  \____/  |_|\_\ |______| |_|  |_| |_| \_|  \____/  |_|       \___\_\ |_|  \_\ |_____/     |_|     \____/      \/         \/  \/     /_/ \_\    |_|    /_____| 
                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                               
`,
		},
		{
			name: "abcdefghijklmnopqrstuvwxyz",
			args: []string{"cmd", "abcdefghijklmnopqrstuvwxyz"},
			wantOutput: `         _                  _           __           _       _     _          _                                                            _                                                    
        | |                | |         / _|         | |     (_)   (_)  _     | |                                                          | |                                                   
  __ _  | |__     ___    __| |   ___  | |_    __ _  | |__    _     _  | | _  | |  _ __ ___    _ __     ___    _ __     __ _   _ __   ___  | |_   _   _  __   __ __      __ __  __  _   _   ____ 
 / _` + "`" + ` | | '_ \   / __|  / _` + "`" + ` |  / _ \ |  _|  / _` + "`" + ` | |  _ \  | |   | | | |/ / | | | '_ ` + "`" + ` _ \  | '_ \   / _ \  | '_ \   / _` + "`" + ` | | '__| / __| | __| | | | | \ \ / / \ \ /\ / / \ \/ / | | | | |_  / 
| (_| | | |_) | | (__  | (_| | |  __/ | |   | (_| | | | | | | |   | | |   <  | | | | | | | | | | | | | (_) | | |_) | | (_| | | |    \__ \ \ |_  | |_| |  \ V /   \ V  V /   >  <  | |_| |  / /  
 \__,_| |_.__/   \___|  \__,_|  \___| |_|    \__, | |_| |_| |_|   | | |_|\_\ |_| |_| |_| |_| |_| |_|  \___/  | .__/   \__, | |_|    |___/  \__|  \__,_|   \_/     \_/\_/   /_/\_\  \__, | /___| 
                                              __/ |              _/ |                                        | |         | |                                                       __/ /        
                                             |___/              |__/                                         |_|         |_|                                                      |___/         
`,
		},
		{
			name: "outside ascii",
			args: []string{"cmd", "🍆"},
			wantOutput: `Error: Only ASCII characters or newline symbols (\n) are allowed.
`,
		},
		{
			name: "multiple args",
			args: []string{"cmd", "hello", "world"},
			wantOutput: `Error: Please provide exactly one argument.
`,
		},
		{
			name: "no args",
			args: []string{"cmd"},
			wantOutput: `Error: Please provide exactly one argument.
`,
		},
	}

	// Loop through test cases
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Set os.Args to the test case's arguments
			os.Args = append([]string{"cmd"}, tt.args[1:]...)

			// Capture stdout using a pipe
			stdout := os.Stdout  // Backup original os.Stdout
			r, w, _ := os.Pipe() // Create a pipe
			os.Stdout = w        // Redirect os.Stdout to the write end of the pipe

			// Run main function
			main()

			// Close the writer and restore stdout
			w.Close()
			os.Stdout = stdout

			// Read the output from the reader
			var buf bytes.Buffer
			io.Copy(&buf, r)
			r.Close()

			// Get the output
			gotOutput := buf.String()

			// Normalize line endings
			gotOutput = strings.ReplaceAll(gotOutput, "\r\n", "\n")
			tt.wantOutput = strings.ReplaceAll(tt.wantOutput, "\r\n", "\n")

			// Compare the output
			if gotOutput != tt.wantOutput {
				t.Errorf("Test '%s' failed.\nExpected output:\n%v\nGot:\n%v", tt.name, tt.wantOutput, gotOutput)
			}
		})
	}
}
